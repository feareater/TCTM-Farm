{"version":3,"sources":["state/farms/fetchFarms.ts","state/farms/fetchFarmUser.ts","state/farms/index.ts","utils/getRpcUrl.ts","contexts/RefreshContext.tsx","state/actions.ts","hooks/useRefresh.ts","contexts/Localisation/translationsContext.ts","state/hooks.ts","components/layout/Container.tsx","components/layout/Page.tsx","config/constants/types.ts","utils/multicall.ts","utils/addressHelpers.ts","config/constants/pools.ts","state/pools/fetchPoolsUser.ts","state/pools/index.ts","config/constants/farms.ts","config/constants/contracts.ts","style/Global.tsx","config/localisation/languageCodes.ts","contexts/Localisation/languageContext.tsx","contexts/ThemeContext.tsx","hooks/useTheme.ts","components/Menu/config.ts","components/Menu/index.tsx","components/PageLoader.tsx","App.tsx","contexts/BlockContext.tsx","state/index.ts","Providers.tsx","index.tsx","utils/web3.ts"],"names":["fetchFarms","a","Promise","all","farmsConfig","map","farmConfig","lpAdress","lpAddresses","CHAIN_ID","calls","address","tokenAddresses","name","params","quoteTokenAdresses","isTokenOnly","getMasterChefAddress","multicall","erc20","tokenBalanceLP","quoteTokenBlanceLP","lpTokenBalanceMC","lpTotalSupply","tokenDecimals","quoteTokenDecimals","tokenAmount","BigNumber","div","pow","tokenPriceVsQuote","tokenSymbol","QuoteToken","BUSD","quoteTokenSymbol","lpTotalInQuoteToken","times","lpTokenRatio","quoteTokenAmount","comparedTo","masterchefABI","pid","info","totalAllocPoint","tacoPerBlock","allocPoint","_hex","poolWeight","toJSON","toNumber","multiplier","toString","depositFeeBP","console","log","lpSymbol","reject","data","fetchFarmUserAllowances","account","masterChefAdress","farm","erc20ABI","rawLpAllowances","parsedLpAllowances","lpBalance","fetchFarmUserTokenBalances","rawTokenBalances","parsedTokenBalances","tokenBalance","fetchFarmUserStakedBalances","rawStakedBalances","parsedStakedBalances","stakedBalance","fetchFarmUserEarnings","rawEarnings","parsedEarnings","earnings","initialState","farmsSlice","createSlice","reducers","setFarmsPublicData","state","action","liveFarmsData","payload","liveFarmData","find","f","setFarmUserData","arrayOfUserDataObjects","forEach","userDataEl","index","userData","actions","fetchFarmsPublicDataAsync","dispatch","farms","fetchFarmUserDataAsync","userFarmAllowances","userFarmTokenBalances","userStakedBalances","userFarmEarnings","farmAllowance","allowance","nodes","process","getNodeUrl","randomIndex","random","length","RefreshContext","React","createContext","slow","fast","RefreshContextProvider","children","useState","setSlow","setFast","useEffect","interval","setInterval","prev","clearInterval","Provider","value","useRefresh","useContext","fastRefresh","slowRefresh","defaultTranslationState","translations","setTranslations","TranslationsContext","ZERO","useFetchPublicData","useDispatch","useFarms","useSelector","useFarmFromPid","useFarmUser","usePriceBnbBusd","usePriceCakeBusd","useTotalValue","bnbPrice","cakePrice","i","val","BNB","CAKE","plus","Container","styled","theme","mediaQueries","sm","Page","lg","PoolCategory","abi","web3","getWeb3","multi","eth","Contract","MultiCallAbi","getMulticallAddress","itf","Interface","calldata","call","toLowerCase","encodeFunctionData","methods","aggregate","returnData","res","decodeFunctionResult","getCakeAddress","addresses","cake","chainId","masterChef","mulltiCall","getWbnbAddress","wbnb","pools","sousId","tokenName","stakingTokenName","stakingTokenAddress","contractAddress","97","56","poolCategory","CORE","projectLink","harvest","tokenPerBlock","sortOrder","isFinished","SYRUP","nonBnbPools","poolsConfig","filter","p","bnbPools","nonMasterPools","masterChefContract","masterChefABI","fetchPoolsAllowance","allowances","reduce","acc","pool","fetchUserBalances","tokenBalancesRaw","tokenBalances","getBalance","bnbBalance","bnbBalances","fetchUserStakeBalances","sousChefABI","userInfo","stakedBalances","amount","masterPoolAmount","0","fetchUserPendingRewards","pendingRewards","pendingTaco","pendingReward","PoolsSlice","setPoolsPublicData","livePoolsData","livePoolData","entry","setPoolsUserData","userPoolData","updatePoolsUserData","field","findIndex","fetchPoolsUserDataAsync","stakingTokenBalances","stakingTokenBalance","updateUserAllowance","updateUserBalance","updateUserStakedBalance","updateUserPendingReward","TACO_MAINNET","risk","contracts","busd","usdc","usdt","GlobalStyle","createGlobalStyle","colors","background","EN","code","language","allLanguages","CACHE_KEY","LanguageContext","selectedLanguage","setSelectedLanguage","translatedLanguage","setTranslatedLanguage","LanguageContextProvider","parseInt","REACT_APP_CROWDIN_PROJECTID","StringTranslations","token","REACT_APP_CROWDIN_APIKEY","storedLangCode","localStorage","getItem","storedLang","getStoredLang","fetch","then","r","json","translationApiResponse","catch","e","error","langObject","setItem","ThemeContext","isDark","toggleTheme","ThemeContextProvider","isDarkUserSetting","JSON","parse","setIsDark","prevState","stringify","dark","light","useTheme","StyledThemeCopntext","config","label","icon","href","items","Menu","props","useWallet","connect","reset","login","logout","currentLang","langs","setLang","links","Wrapper","PageLoader","Home","lazy","Farms","NotFound","EXPONENTIAL_AT","DECIMAL_PLACES","App","window","Global","fallback","path","exact","tokenMode","component","memo","BlockContext","BlockContextProvider","previousBlock","useRef","block","setBlock","getBlockNumber","blockNumber","current","configureStore","devTools","reducer","farmsReducer","poolsReducer","Providers","rpcUrl","getRpcUrl","store","connectors","walletconnect","bsc","ReactDOM","render","StrictMode","document","getElementById","RPC_URL","httpProvider","Web3","providers","HttpProvider","timeout","getContract","contractOptions"],"mappings":"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","file":"static/js/main.b5d932b8.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js'\r\nimport erc20 from 'config/abi/erc20.json'\r\nimport masterchefABI from 'config/abi/masterchef.json'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport farmsConfig from 'config/constants/farms'\r\nimport { QuoteToken } from '../../config/constants/types'\r\n\r\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\r\n\r\nconst fetchFarms = async () => {\r\n  const data = await Promise.all(\r\n    farmsConfig.map(async (farmConfig) => {\r\n      try {\r\n        const lpAdress = farmConfig.lpAddresses[CHAIN_ID]\r\n        const calls = [\r\n          // Balance of token in the LP contract\r\n          {\r\n            address: farmConfig.tokenAddresses[CHAIN_ID],\r\n            name: 'balanceOf',\r\n            params: [lpAdress],\r\n          },\r\n          // Balance of quote token on LP contract\r\n          {\r\n            address: farmConfig.quoteTokenAdresses[CHAIN_ID],\r\n            name: 'balanceOf',\r\n            params: [lpAdress],\r\n          },\r\n          // Balance of LP tokens in the master chef contract\r\n          {\r\n            address: farmConfig.isTokenOnly ? farmConfig.tokenAddresses[CHAIN_ID] : lpAdress,\r\n            name: 'balanceOf',\r\n            params: [getMasterChefAddress()],\r\n          },\r\n          // Total supply of LP tokens\r\n          {\r\n            address: lpAdress,\r\n            name: 'totalSupply',\r\n          },\r\n          // Token decimals\r\n          {\r\n            address: farmConfig.tokenAddresses[CHAIN_ID],\r\n            name: 'decimals',\r\n          },\r\n          // Quote token decimals\r\n          {\r\n            address: farmConfig.quoteTokenAdresses[CHAIN_ID],\r\n            name: 'decimals',\r\n          },\r\n        ]\r\n\r\n        const [\r\n          tokenBalanceLP,\r\n          quoteTokenBlanceLP,\r\n          lpTokenBalanceMC,\r\n          lpTotalSupply,\r\n          tokenDecimals,\r\n          quoteTokenDecimals,\r\n        ] = await multicall(erc20, calls)\r\n\r\n        let tokenAmount\r\n        let lpTotalInQuoteToken\r\n        let tokenPriceVsQuote\r\n        if (farmConfig.isTokenOnly) {\r\n          tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(tokenDecimals))\r\n          if (farmConfig.tokenSymbol === QuoteToken.BUSD && farmConfig.quoteTokenSymbol === QuoteToken.BUSD) {\r\n            tokenPriceVsQuote = new BigNumber(1)\r\n          } else {\r\n            tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP))\r\n          }\r\n          lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote)\r\n        } else {\r\n          // Ratio in % a LP tokens that are in staking, vs the total number in circulation\r\n          const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\r\n\r\n          // Total value in staking in quote token value\r\n          lpTotalInQuoteToken = new BigNumber(quoteTokenBlanceLP)\r\n            .div(new BigNumber(10).pow(18))\r\n            .times(new BigNumber(2))\r\n            .times(lpTokenRatio)\r\n\r\n          // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\r\n          tokenAmount = new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio)\r\n          const quoteTokenAmount = new BigNumber(quoteTokenBlanceLP)\r\n            .div(new BigNumber(10).pow(quoteTokenDecimals))\r\n            .times(lpTokenRatio)\r\n\r\n          if (tokenAmount.comparedTo(0) > 0) {\r\n            tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount)\r\n          } else {\r\n            tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP))\r\n          }\r\n        }\r\n\r\n        const [info, totalAllocPoint, tacoPerBlock] = await multicall(masterchefABI, [\r\n          {\r\n            address: getMasterChefAddress(),\r\n            name: 'poolInfo',\r\n            params: [farmConfig.pid],\r\n          },\r\n          {\r\n            address: getMasterChefAddress(),\r\n            name: 'totalAllocPoint',\r\n          },\r\n          {\r\n            address: getMasterChefAddress(),\r\n            name: 'tacoPerBlock',\r\n          },\r\n        ])\r\n\r\n        const allocPoint = new BigNumber(info.allocPoint._hex)\r\n        const poolWeight = allocPoint.div(new BigNumber(totalAllocPoint))\r\n\r\n        return {\r\n          ...farmConfig,\r\n          tokenAmount: tokenAmount.toJSON(),\r\n          // quoteTokenAmount: quoteTokenAmount,\r\n          lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\r\n          tokenPriceVsQuote: tokenPriceVsQuote.toJSON(),\r\n          poolWeight: poolWeight.toNumber(),\r\n          multiplier: `${allocPoint.div(100).toString()}X`,\r\n          depositFeeBP: info.depositFeeBP,\r\n          tacoPerBlock: new BigNumber(tacoPerBlock).toNumber(),\r\n        }\r\n      } catch (ex) {\r\n        console.log('ERROR')\r\n        console.log(farmConfig.lpSymbol)\r\n        console.log(ex)\r\n        return Promise.reject()\r\n      }\r\n    }),\r\n  )\r\n\r\n  return data\r\n}\r\n\r\nexport default fetchFarms\r\n","import BigNumber from 'bignumber.js'\r\nimport erc20ABI from 'config/abi/erc20.json'\r\nimport masterchefABI from 'config/abi/masterchef.json'\r\nimport multicall from 'utils/multicall'\r\nimport farmsConfig from 'config/constants/farms'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\n\r\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\r\n\r\nexport const fetchFarmUserAllowances = async (account: string) => {\r\n  const masterChefAdress = getMasterChefAddress()\r\n\r\n  const calls = farmsConfig.map((farm) => {\r\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\r\n    return { address: lpContractAddress, name: 'allowance', params: [account, masterChefAdress] }\r\n  })\r\n\r\n  const rawLpAllowances = await multicall(erc20ABI, calls)\r\n\r\n  const parsedLpAllowances = rawLpAllowances.map((lpBalance) => {\r\n    return new BigNumber(lpBalance).toJSON()\r\n  })\r\n  return parsedLpAllowances\r\n}\r\n\r\nexport const fetchFarmUserTokenBalances = async (account: string) => {\r\n  const calls = farmsConfig.map((farm) => {\r\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\r\n    return {\r\n      address: lpContractAddress,\r\n      name: 'balanceOf',\r\n      params: [account],\r\n    }\r\n  })\r\n\r\n  const rawTokenBalances = await multicall(erc20ABI, calls)\r\n  const parsedTokenBalances = rawTokenBalances.map((tokenBalance) => {\r\n    return new BigNumber(tokenBalance).toJSON()\r\n  })\r\n  return parsedTokenBalances\r\n}\r\n\r\nexport const fetchFarmUserStakedBalances = async (account: string) => {\r\n  const masterChefAdress = getMasterChefAddress()\r\n\r\n  const calls = farmsConfig.map((farm) => {\r\n    return {\r\n      address: masterChefAdress,\r\n      name: 'userInfo',\r\n      params: [farm.pid, account],\r\n    }\r\n  })\r\n\r\n  const rawStakedBalances = await multicall(masterchefABI, calls)\r\n  const parsedStakedBalances = rawStakedBalances.map((stakedBalance) => {\r\n    return new BigNumber(stakedBalance[0]._hex).toJSON()\r\n  })\r\n  return parsedStakedBalances\r\n}\r\n\r\nexport const fetchFarmUserEarnings = async (account: string) => {\r\n  const masterChefAdress = getMasterChefAddress()\r\n\r\n  const calls = farmsConfig.map((farm) => {\r\n    return {\r\n      address: masterChefAdress,\r\n      name: 'pendingTCTM',\r\n      params: [farm.pid, account],\r\n    }\r\n  })\r\n\r\n  const rawEarnings = await multicall(masterchefABI, calls)\r\n  const parsedEarnings = rawEarnings.map((earnings) => {\r\n    return new BigNumber(earnings).toJSON()\r\n  })\r\n  return parsedEarnings\r\n}\r\n","/* eslint-disable no-param-reassign */\r\nimport { createSlice } from '@reduxjs/toolkit'\r\nimport farmsConfig from 'config/constants/farms'\r\nimport fetchFarms from './fetchFarms'\r\nimport {\r\n  fetchFarmUserEarnings,\r\n  fetchFarmUserAllowances,\r\n  fetchFarmUserTokenBalances,\r\n  fetchFarmUserStakedBalances,\r\n} from './fetchFarmUser'\r\nimport { FarmsState, Farm } from '../types'\r\n\r\nconst initialState: FarmsState = { data: [...farmsConfig] }\r\n\r\nexport const farmsSlice = createSlice({\r\n  name: 'Farms',\r\n  initialState,\r\n  reducers: {\r\n    setFarmsPublicData: (state, action) => {\r\n      const liveFarmsData: Farm[] = action.payload\r\n      state.data = state.data.map((farm) => {\r\n        const liveFarmData = liveFarmsData.find((f) => f.pid === farm.pid)\r\n        return { ...farm, ...liveFarmData }\r\n      })\r\n    },\r\n    setFarmUserData: (state, action) => {\r\n      const { arrayOfUserDataObjects } = action.payload\r\n      arrayOfUserDataObjects.forEach((userDataEl) => {\r\n        const { index } = userDataEl\r\n        state.data[index] = { ...state.data[index], userData: userDataEl }\r\n      })\r\n    },\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { setFarmsPublicData, setFarmUserData } = farmsSlice.actions\r\n\r\n// Thunks\r\nexport const fetchFarmsPublicDataAsync = () => async (dispatch) => {\r\n  const farms = await fetchFarms()\r\n  dispatch(setFarmsPublicData(farms))\r\n}\r\nexport const fetchFarmUserDataAsync = (account) => async (dispatch) => {\r\n  const userFarmAllowances = await fetchFarmUserAllowances(account)\r\n  const userFarmTokenBalances = await fetchFarmUserTokenBalances(account)\r\n  const userStakedBalances = await fetchFarmUserStakedBalances(account)\r\n  const userFarmEarnings = await fetchFarmUserEarnings(account)\r\n\r\n  const arrayOfUserDataObjects = userFarmAllowances.map((farmAllowance, index) => {\r\n    return {\r\n      index,\r\n      allowance: userFarmAllowances[index],\r\n      tokenBalance: userFarmTokenBalances[index],\r\n      stakedBalance: userStakedBalances[index],\r\n      earnings: userFarmEarnings[index],\r\n    }\r\n  })\r\n\r\n  dispatch(setFarmUserData({ arrayOfUserDataObjects }))\r\n}\r\n\r\nexport default farmsSlice.reducer\r\n","import random from 'lodash/random'\r\n\r\n// Array of available nodes to connect to\r\nconst nodes = [process.env.REACT_APP_NODE_1, process.env.REACT_APP_NODE_2, process.env.REACT_APP_NODE_3]\r\n\r\nconst getNodeUrl = () => {\r\n  const randomIndex = random(0, nodes.length - 1)\r\n  return nodes[randomIndex]\r\n}\r\n\r\nexport default getNodeUrl\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nconst FAST_INTERVAL = 10000\r\nconst SLOW_INTERVAL = 60000\r\n\r\nconst RefreshContext = React.createContext({ slow: 0, fast: 0 })\r\n\r\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\r\nconst RefreshContextProvider = ({ children }) => {\r\n  const [slow, setSlow] = useState(0)\r\n  const [fast, setFast] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      setFast((prev) => prev + 1)\r\n    }, FAST_INTERVAL)\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      setSlow((prev) => prev + 1)\r\n    }, SLOW_INTERVAL)\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  return <RefreshContext.Provider value={{ slow, fast }}>{children}</RefreshContext.Provider>\r\n}\r\n\r\nexport { RefreshContext, RefreshContextProvider }\r\n","export { fetchFarmsPublicDataAsync, fetchFarmUserDataAsync } from './farms'\r\nexport {\r\n  fetchPoolsPublicDataAsync,\r\n  fetchPoolsUserDataAsync,\r\n  updateUserAllowance,\r\n  updateUserBalance,\r\n  updateUserPendingReward,\r\n  updateUserStakedBalance,\r\n} from './pools'\r\n","import { useContext } from 'react'\r\nimport { RefreshContext } from 'contexts/RefreshContext'\r\n\r\nconst useRefresh = () => {\r\n  const { fast, slow } = useContext(RefreshContext)\r\n  return { fastRefresh: fast, slowRefresh: slow }\r\n}\r\n\r\nexport default useRefresh\r\n","import React, { createContext } from 'react'\r\n\r\nexport interface TranslationState {\r\n  translations: Array<any>\r\n  setTranslations: React.Dispatch<React.SetStateAction<Array<any>>>\r\n}\r\n\r\nconst defaultTranslationState: TranslationState = {\r\n  translations: [],\r\n  setTranslations: (): void => undefined,\r\n}\r\n\r\nexport const TranslationsContext = createContext(defaultTranslationState as TranslationState)\r\n","import BigNumber from 'bignumber.js'\r\nimport { useEffect, useMemo } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { fetchFarmsPublicDataAsync, fetchPoolsPublicDataAsync, fetchPoolsUserDataAsync } from './actions'\r\nimport { State, Farm, Pool } from './types'\r\nimport { QuoteToken } from '../config/constants/types'\r\n\r\nconst ZERO = new BigNumber(0)\r\n\r\nexport const useFetchPublicData = () => {\r\n  const dispatch = useDispatch()\r\n  const { slowRefresh } = useRefresh()\r\n  useEffect(() => {\r\n    dispatch(fetchFarmsPublicDataAsync())\r\n    // dispatch(fetchPoolsPublicDataAsync())\r\n  }, [dispatch, slowRefresh])\r\n}\r\n\r\n// Farms\r\n\r\nexport const useFarms = (): Farm[] => {\r\n  const farms = useSelector((state: State) => state.farms.data)\r\n  return farms\r\n}\r\n\r\nexport const useFarmFromPid = (pid): Farm => {\r\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\r\n  return farm\r\n}\r\n\r\nexport const useFarmFromSymbol = (lpSymbol: string): Farm => {\r\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\r\n  return farm\r\n}\r\n\r\nexport const useFarmUser = (pid) => {\r\n  const farm = useFarmFromPid(pid)\r\n\r\n  return {\r\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : new BigNumber(0),\r\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : new BigNumber(0),\r\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : new BigNumber(0),\r\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : new BigNumber(0),\r\n  }\r\n}\r\n\r\n// Pools\r\n\r\nexport const usePools = (account): Pool[] => {\r\n  const { fastRefresh } = useRefresh()\r\n  const dispatch = useDispatch()\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchPoolsUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  const pools = useSelector((state: State) => state.pools.data)\r\n  return pools\r\n}\r\n\r\nexport const usePoolFromPid = (sousId): Pool => {\r\n  const pool = useSelector((state: State) => state.pools.data.find((p) => p.sousId === sousId))\r\n  return pool\r\n}\r\n\r\n// Prices\r\n\r\nexport const usePriceBnbBusd = (): BigNumber => {\r\n  const pid = 2 // BUSD-BNB LP //TODO: SET BACK to 2!!\r\n  const farm = useFarmFromPid(pid)\r\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\r\n}\r\n\r\nexport const usePriceCakeBusd = (): BigNumber => {\r\n  const pid = 0 // TCTM-BUSD LP\r\n  const farm = useFarmFromPid(pid)\r\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\r\n}\r\n\r\nexport const useTotalValue = (): BigNumber => {\r\n  const farms = useFarms()\r\n  const bnbPrice = usePriceBnbBusd()\r\n  const cakePrice = usePriceCakeBusd()\r\n  let value = new BigNumber(0)\r\n  for (let i = 0; i < farms.length; i++) {\r\n    const farm = farms[i]\r\n    if (farm.lpTotalInQuoteToken) {\r\n      let val\r\n      if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n        val = bnbPrice.times(farm.lpTotalInQuoteToken)\r\n      } else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\r\n        val = cakePrice.times(farm.lpTotalInQuoteToken)\r\n      } else {\r\n        val = farm.lpTotalInQuoteToken\r\n      }\r\n      value = value.plus(val)\r\n    }\r\n  }\r\n  return value\r\n}\r\n","import styled from 'styled-components'\r\n\r\nconst Container = styled.div`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  max-width: 992px;\r\n  padding-left: 16px;\r\n  padding-right: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-left: 24px;\r\n    padding-right: 24px;\r\n  }\r\n`\r\n\r\nexport default Container\r\n","import styled from 'styled-components'\r\nimport Container from './Container'\r\n\r\nconst Page = styled(Container)`\r\n  min-height: calc(100vh - 64px);\r\n  padding-top: 16px;\r\n  padding-bottom: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-top: 24px;\r\n    padding-bottom: 24px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    padding-top: 32px;\r\n    padding-bottom: 32px;\r\n  }\r\n`\r\n\r\nexport default Page\r\n","export type IfoStatus = 'coming_soon' | 'live' | 'finished'\r\n\r\nexport interface Ifo {\r\n  id: string\r\n  isActive: boolean\r\n  address: string\r\n  name: string\r\n  subTitle?: string\r\n  description?: string\r\n  launchDate: string\r\n  launchTime: string\r\n  saleAmount: string\r\n  raiseAmount: string\r\n  cakeToBurn: string\r\n  projectSiteUrl: string\r\n  currency: string\r\n  currencyAddress: string\r\n  tokenDecimals: number\r\n  releaseBlockNumber: number\r\n}\r\n\r\nexport enum QuoteToken {\r\n  'BNB' = 'BNB',\r\n  'CAKE' = 'CAKE',\r\n  'SYRUP' = 'SYRUP',\r\n  'BUSD' = 'BUSD',\r\n  'TWT' = 'TWT',\r\n  'UST' = 'UST',\r\n  'USDC' = 'USDC',\r\n  'USDT' = 'USDT',\r\n}\r\n\r\nexport enum PoolCategory {\r\n  'COMMUNITY' = 'Community',\r\n  'CORE' = 'Core',\r\n  'BINANCE' = 'Binance', // Pools using native BNB behave differently than pools using a token\r\n}\r\n\r\nexport interface Address {\r\n  97?: string\r\n  56: string\r\n}\r\n\r\nexport interface FarmConfig {\r\n  pid: number\r\n  lpSymbol: string\r\n  lpAddresses: Address\r\n  tokenSymbol: string\r\n  tokenAddresses: Address\r\n  quoteTokenSymbol: QuoteToken\r\n  quoteTokenAdresses: Address\r\n  multiplier?: string\r\n  isTokenOnly?: boolean\r\n  isCommunity?: boolean\r\n  risk: number\r\n  dual?: {\r\n    rewardPerBlock: number\r\n    earnLabel: string\r\n    endBlock: number\r\n  }\r\n}\r\n\r\nexport interface PoolConfig {\r\n  sousId: number\r\n  image?: string\r\n  tokenName: string\r\n  stakingTokenName: QuoteToken\r\n  stakingLimit?: number\r\n  stakingTokenAddress?: string\r\n  contractAddress: Address\r\n  poolCategory: PoolCategory\r\n  projectLink: string\r\n  tokenPerBlock: string\r\n  sortOrder?: number\r\n  harvest?: boolean\r\n  isFinished?: boolean\r\n  tokenDecimals: number\r\n}\r\n\r\nexport type Nft = {\r\n  name: string\r\n  description: string\r\n  originalImage: string\r\n  previewImage: string\r\n  blurImage: string\r\n  sortOrder: number\r\n  bunnyId: number\r\n}\r\n","import { AbiItem } from 'web3-utils'\r\nimport { Interface } from '@ethersproject/abi'\r\nimport { getWeb3 } from 'utils/web3'\r\nimport MultiCallAbi from 'config/abi/Multicall.json'\r\nimport { getMulticallAddress } from 'utils/addressHelpers'\r\n\r\ninterface Call {\r\n  address: string // Address of the contract\r\n  name: string // Function name on the contract (exemple: balanceOf)\r\n  params?: any[] // Function params\r\n}\r\n\r\nconst multicall = async (abi: any[], calls: Call[]) => {\r\n  const web3 = getWeb3()\r\n  const multi = new web3.eth.Contract((MultiCallAbi as unknown) as AbiItem, getMulticallAddress())\r\n  const itf = new Interface(abi)\r\n\r\n  const calldata = calls.map((call) => [call.address.toLowerCase(), itf.encodeFunctionData(call.name, call.params)])\r\n  const { returnData } = await multi.methods.aggregate(calldata).call()\r\n  const res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i].name, call))\r\n\r\n  return res\r\n}\r\n\r\nexport default multicall\r\n","import addresses from 'config/constants/contracts'\r\n\r\nconst chainId = process.env.REACT_APP_CHAIN_ID\r\n\r\nexport const getCakeAddress = () => {\r\n  return addresses.cake[chainId]\r\n}\r\nexport const getMasterChefAddress = () => {\r\n  return addresses.masterChef[chainId]\r\n}\r\nexport const getMulticallAddress = () => {\r\n  return addresses.mulltiCall[chainId]\r\n}\r\nexport const getWbnbAddress = () => {\r\n  return addresses.wbnb[chainId]\r\n}\r\n\r\n","import { PoolConfig, QuoteToken, PoolCategory } from './types'\r\n\r\nconst pools: PoolConfig[] = [\r\n  {\r\n    sousId: 0,\r\n    tokenName: 'CAKE',\r\n    stakingTokenName: QuoteToken.CAKE,\r\n    stakingTokenAddress: '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',\r\n    contractAddress: {\r\n      97: '0xd3af5fe61dbaf8f73149bfcfa9fb653ff096029a',\r\n      56: '0x73feaa1eE314F8c655E354234017bE2193C9E24E',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    projectLink: 'https://pancakeswap.finance/',\r\n    harvest: true,\r\n    tokenPerBlock: '10',\r\n    sortOrder: 1,\r\n    isFinished: false,\r\n    tokenDecimals: 18,\r\n  },\r\n  {\r\n    sousId: 1,\r\n    tokenName: 'TWT',\r\n    stakingTokenName: QuoteToken.SYRUP,\r\n    stakingTokenAddress: '0x009cF7bC57584b7998236eff51b98A168DceA9B0',\r\n    contractAddress: {\r\n      97: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\r\n      56: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    projectLink: 'https://trustwallet.com/',\r\n    harvest: true,\r\n    tokenPerBlock: '20',\r\n    sortOrder: 999,\r\n    isFinished: true,\r\n    tokenDecimals: 18,\r\n  },\r\n]\r\n\r\nexport default pools\r\n","import { AbiItem } from 'web3-utils'\r\nimport poolsConfig from 'config/constants/pools'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport sousChefABI from 'config/abi/sousChef.json'\r\nimport erc20ABI from 'config/abi/erc20.json'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport { getWeb3 } from 'utils/web3'\r\nimport BigNumber from 'bignumber.js'\r\n\r\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\r\n\r\n// Pool 0, Cake / Cake is a different kind of contract (master chef)\r\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\r\nconst nonBnbPools = poolsConfig.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\r\nconst bnbPools = poolsConfig.filter((p) => p.stakingTokenName === QuoteToken.BNB)\r\nconst nonMasterPools = poolsConfig.filter((p) => p.sousId !== 0)\r\nconst web3 = getWeb3()\r\nconst masterChefContract = new web3.eth.Contract((masterChefABI as unknown) as AbiItem, getMasterChefAddress())\r\n\r\nexport const fetchPoolsAllowance = async (account) => {\r\n  const calls = nonBnbPools.map((p) => ({\r\n    address: p.stakingTokenAddress,\r\n    name: 'allowance',\r\n    params: [account, p.contractAddress[CHAIN_ID]],\r\n  }))\r\n\r\n  const allowances = await multicall(erc20ABI, calls)\r\n  return nonBnbPools.reduce(\r\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(allowances[index]).toJSON() }),\r\n    {},\r\n  )\r\n}\r\n\r\nexport const fetchUserBalances = async (account) => {\r\n  // Non BNB pools\r\n  const calls = nonBnbPools.map((p) => ({\r\n    address: p.stakingTokenAddress,\r\n    name: 'balanceOf',\r\n    params: [account],\r\n  }))\r\n  const tokenBalancesRaw = await multicall(erc20ABI, calls)\r\n  const tokenBalances = nonBnbPools.reduce(\r\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON() }),\r\n    {},\r\n  )\r\n\r\n  // BNB pools\r\n  const bnbBalance = await web3.eth.getBalance(account)\r\n  const bnbBalances = bnbPools.reduce(\r\n    (acc, pool) => ({ ...acc, [pool.sousId]: new BigNumber(bnbBalance).toJSON() }),\r\n    {},\r\n  )\r\n\r\n  return { ...tokenBalances, ...bnbBalances }\r\n}\r\n\r\nexport const fetchUserStakeBalances = async (account) => {\r\n  const calls = nonMasterPools.map((p) => ({\r\n    address: p.contractAddress[CHAIN_ID],\r\n    name: 'userInfo',\r\n    params: [account],\r\n  }))\r\n  const userInfo = await multicall(sousChefABI, calls)\r\n  const stakedBalances = nonMasterPools.reduce(\r\n    (acc, pool, index) => ({\r\n      ...acc,\r\n      [pool.sousId]: new BigNumber(userInfo[index].amount._hex).toJSON(),\r\n    }),\r\n    {},\r\n  )\r\n\r\n  // Cake / Cake pool\r\n  const { amount: masterPoolAmount } = await masterChefContract.methods.userInfo('0', account).call()\r\n\r\n  return { ...stakedBalances, 0: new BigNumber(masterPoolAmount).toJSON() }\r\n}\r\n\r\nexport const fetchUserPendingRewards = async (account) => {\r\n  const calls = nonMasterPools.map((p) => ({\r\n    address: p.contractAddress[CHAIN_ID],\r\n    name: 'pendingReward',\r\n    params: [account],\r\n  }))\r\n  const res = await multicall(sousChefABI, calls)\r\n  const pendingRewards = nonMasterPools.reduce(\r\n    (acc, pool, index) => ({\r\n      ...acc,\r\n      [pool.sousId]: new BigNumber(res[index]).toJSON(),\r\n    }),\r\n    {},\r\n  )\r\n\r\n  // Cake / Cake pool\r\n  const pendingReward = await masterChefContract.methods.pendingTaco('0', account).call()\r\n\r\n  return { ...pendingRewards, 0: new BigNumber(pendingReward).toJSON() }\r\n}\r\n","/* eslint-disable no-param-reassign */\r\nimport { createSlice } from '@reduxjs/toolkit'\r\nimport poolsConfig from 'config/constants/pools'\r\nimport { fetchPoolsBlockLimits, fetchPoolsTotalStatking } from './fetchPools'\r\nimport {\r\n  fetchPoolsAllowance,\r\n  fetchUserBalances,\r\n  fetchUserStakeBalances,\r\n  fetchUserPendingRewards,\r\n} from './fetchPoolsUser'\r\nimport { PoolsState, Pool } from '../types'\r\n\r\nconst initialState: PoolsState = { data: [...poolsConfig] }\r\n\r\nexport const PoolsSlice = createSlice({\r\n  name: 'Pools',\r\n  initialState,\r\n  reducers: {\r\n    setPoolsPublicData: (state, action) => {\r\n      const livePoolsData: Pool[] = action.payload\r\n      state.data = state.data.map((pool) => {\r\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool.sousId)\r\n        return { ...pool, ...livePoolData }\r\n      })\r\n    },\r\n    setPoolsUserData: (state, action) => {\r\n      const userData = action.payload\r\n      state.data = state.data.map((pool) => {\r\n        const userPoolData = userData.find((entry) => entry.sousId === pool.sousId)\r\n        return { ...pool, userData: userPoolData }\r\n      })\r\n    },\r\n    updatePoolsUserData: (state, action) => {\r\n      const { field, value, sousId } = action.payload\r\n      const index = state.data.findIndex((p) => p.sousId === sousId)\r\n      state.data[index] = { ...state.data[index], userData: { ...state.data[index].userData, [field]: value } }\r\n    },\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { setPoolsPublicData, setPoolsUserData, updatePoolsUserData } = PoolsSlice.actions\r\n\r\n// Thunks\r\nexport const fetchPoolsPublicDataAsync = () => async (dispatch) => {\r\n  const blockLimits = await fetchPoolsBlockLimits()\r\n  const totalStakings = await fetchPoolsTotalStatking()\r\n\r\n  const liveData = poolsConfig.map((pool) => {\r\n    const blockLimit = blockLimits.find((entry) => entry.sousId === pool.sousId)\r\n    const totalStaking = totalStakings.find((entry) => entry.sousId === pool.sousId)\r\n    return {\r\n      ...blockLimit,\r\n      ...totalStaking,\r\n    }\r\n  })\r\n\r\n  dispatch(setPoolsPublicData(liveData))\r\n}\r\n\r\nexport const fetchPoolsUserDataAsync = (account) => async (dispatch) => {\r\n  const allowances = await fetchPoolsAllowance(account)\r\n  const stakingTokenBalances = await fetchUserBalances(account)\r\n  const stakedBalances = await fetchUserStakeBalances(account)\r\n  const pendingRewards = await fetchUserPendingRewards(account)\r\n\r\n  const userData = poolsConfig.map((pool) => ({\r\n    sousId: pool.sousId,\r\n    allowance: allowances[pool.sousId],\r\n    stakingTokenBalance: stakingTokenBalances[pool.sousId],\r\n    stakedBalance: stakedBalances[pool.sousId],\r\n    pendingReward: pendingRewards[pool.sousId],\r\n  }))\r\n\r\n  dispatch(setPoolsUserData(userData))\r\n}\r\n\r\nexport const updateUserAllowance = (sousId: string, account: string) => async (dispatch) => {\r\n  const allowances = await fetchPoolsAllowance(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'allowance', value: allowances[sousId] }))\r\n}\r\n\r\nexport const updateUserBalance = (sousId: string, account: string) => async (dispatch) => {\r\n  const tokenBalances = await fetchUserBalances(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\r\n}\r\n\r\nexport const updateUserStakedBalance = (sousId: string, account: string) => async (dispatch) => {\r\n  const stakedBalances = await fetchUserStakeBalances(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'stakedBalance', value: stakedBalances[sousId] }))\r\n}\r\n\r\nexport const updateUserPendingReward = (sousId: string, account: string) => async (dispatch) => {\r\n  const pendingRewards = await fetchUserPendingRewards(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'pendingReward', value: pendingRewards[sousId] }))\r\n}\r\n\r\nexport default PoolsSlice.reducer\r\n","import contracts from './contracts'\r\nimport { FarmConfig, QuoteToken } from './types'\r\n\r\nconst TACO_BUSD_LP_MAINNET = `0x3BB3B98c0FABE30166E6B7D62aEef393249871E4`\r\nconst TACO_BNB_LP_MAINNET = `0x5590d45592C846DD820D360dd5Ba6b2610cDeeFB`\r\nconst TACO_MAINNET = `0x9066e87Bac891409D690cfEfA41379b34af06391`\r\n\r\nconst farms: FarmConfig[] = [\r\n  {\r\n    risk: 10,\r\n    lpSymbol: 'TCTM-BUSD LP',\r\n    lpAddresses: {\r\n      97: '0xbcfede73a76e2294b82d28c2737f9eecdf0342eb',\r\n      56: TACO_BUSD_LP_MAINNET,\r\n    },\r\n    depositFeeBP: '1%',\r\n    tokenSymbol: 'TCTM',\r\n    tokenAddresses: {\r\n      97: '0xbcfede73a76e2294b82d28c2737f9eecdf0342eb',\r\n      56: TACO_MAINNET,\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    risk: 5,\r\n    lpSymbol: 'TCTM-BNB LP',\r\n    lpAddresses: {\r\n      97: '0xbcfede73a76e2294b82d28c2737f9eecdf0342eb',\r\n      56: TACO_BNB_LP_MAINNET,\r\n    },\r\n    tokenSymbol: 'TCTM',\r\n    tokenAddresses: {\r\n      97: '0xbcfede73a76e2294b82d28c2737f9eecdf0342eb',\r\n      56: TACO_MAINNET,\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BNB,\r\n    quoteTokenAdresses: contracts.wbnb,\r\n  },\r\n  {\r\n    risk: 3,\r\n    lpSymbol: 'BNB-BUSD LP',\r\n    lpAddresses: {\r\n      97: '0x01b1405bEF38652468C9f43861010eB73E0AA443',\r\n      56: '0x1b96b92314c44b159149f7e0303511fb2fc4774f',\r\n    },\r\n    tokenSymbol: 'BNB',\r\n    tokenAddresses: {\r\n      97: '0xae13d989dac2f0debff460ac112a837c89baa7cd',\r\n      56: '0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n    depositFeeBP: '1%',\r\n  },\r\n  /* {\r\n    risk: 1,\r\n    lpSymbol: 'USDT-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xc15fa3e22c912a276550f3e5fe3b0deb87b55acd',\r\n    },\r\n    tokenSymbol: 'USDT',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x55d398326f99059ff775485246999027b3197955',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    risk: 2,\r\n    lpSymbol: 'ETH-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x70d8929d04b60af4fb9b58713ebcf18765ade422',\r\n    },\r\n    tokenSymbol: 'ETH',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x2170ed0880ac9a755fd29b2688956bd959f933f8',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BNB,\r\n    quoteTokenAdresses: contracts.wbnb,\r\n  },\r\n  {\r\n    risk: 1,\r\n    lpSymbol: 'USDC-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x680dd100e4b394bda26a59dd5c119a391e747d18',\r\n    },\r\n    tokenSymbol: 'USDC',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    risk: 3,\r\n    lpSymbol: 'DOT-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xbcd62661a6b1ded703585d3af7d7649ef4dcdb5c',\r\n    },\r\n    tokenSymbol: 'DOT',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x7083609fce4d1d8dc0c979aab8c869ea2c873402',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BNB,\r\n    quoteTokenAdresses: contracts.wbnb,\r\n  },\r\n  {\r\n    risk: 4,\r\n    lpSymbol: 'CAKE-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x0ed8e0a2d99643e1e65cca22ed4424090b8b7458',\r\n    },\r\n    tokenSymbol: 'CAKE',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    risk: 4,\r\n    lpSymbol: 'CAKE-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xa527a61703d82139f8a06bc30097cc9caa2df5a6',\r\n    },\r\n    tokenSymbol: 'CAKE',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BNB,\r\n    quoteTokenAdresses: contracts.wbnb,\r\n  },\r\n  // TODO: CHECK POOLS https://github.com/VikingDefi/viking-frontend-farms/blob/master/src/config/constants/farms.ts\r\n  // pools\r\n  {\r\n    risk: 5,\r\n    isTokenOnly: true,\r\n    lpSymbol: 'TACO',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: TACO_BUSD_LP_MAINNET, // TACO-BUSD LP\r\n    },\r\n    tokenSymbol: 'TACO',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: TACO_MAINNET,\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    risk: 1,\r\n    isTokenOnly: true,\r\n    lpSymbol: 'BUSD',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: TACO_BUSD_LP_MAINNET, // TACO-BUSD LP (BUSD-BUSD will ignore)\r\n    },\r\n    tokenSymbol: 'BUSD',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0xe9e7cea3dedca5984780bafc599bd69add087d56',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    risk: 1,\r\n    isTokenOnly: true,\r\n    lpSymbol: 'EGG',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x19e7cbecdd23a16dfa5573df54d98f7caae03019', // EGG-BUSD LP (BUSD-BUSD will ignore)\r\n    },\r\n    tokenSymbol: 'EGG',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0xf952fc3ca7325cc27d15885d37117676d25bfda6',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    risk: 3,\r\n    isTokenOnly: true,\r\n    lpSymbol: 'VIKING',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x9b989a7b8963f4b08ec094710e2966fb3c7f6c43', // VIKING-BUSD LP\r\n    },\r\n    tokenSymbol: 'VIKING',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x896ede222d3f7f3414e136a2791bdb08aaa25ce0',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    risk: 3,\r\n    isTokenOnly: true,\r\n    lpSymbol: 'DOT',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x54c1ec2f543966953f2f7564692606ea7d5a184e', // DOT-BUSD LP\r\n    },\r\n    tokenSymbol: 'DOT',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x7083609fce4d1d8dc0c979aab8c869ea2c873402',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    risk: 3,\r\n    isTokenOnly: true,\r\n    lpSymbol: 'ALPHA',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x5ba0d670ea3db79067ee6861b960f06d53712e18', // ALPHA-BUSD LP\r\n    },\r\n    tokenSymbol: 'ALPHA',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0xa1faa113cbe53436df28ff0aee54275c13b40975',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    risk: 3,\r\n    isTokenOnly: true,\r\n    lpSymbol: 'STAX',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x13abfa7b781bee80ca7fae7ec71045488d876a8d', // STAX-BUSD LP\r\n    },\r\n    tokenSymbol: 'STAX',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x0da6ed8b13214ff28e9ca979dd37439e8a88f6c4',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    risk: 3,\r\n    isTokenOnly: true,\r\n    lpSymbol: 'LINK',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xe54a9d8412287cfc675cae18a0011483ef975f05', // LINK-BUSD LP\r\n    },\r\n    tokenSymbol: 'LINK',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0xf8a0bf9cf54bb92f17374d9e9a321e6a111a51bd',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    risk: 4,\r\n    isTokenOnly: true,\r\n    lpSymbol: 'CAKE',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x0ed8e0a2d99643e1e65cca22ed4424090b8b7458', // CAKE-BUSD LP\r\n    },\r\n    tokenSymbol: 'CAKE',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    risk: 3,\r\n    isTokenOnly: true,\r\n    lpSymbol: 'LINA',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xeb325a8ea1c5abf40c7ceaf645596c1f943d0948', // LINA-BUSD LP\r\n    },\r\n    tokenSymbol: 'LINA',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x762539b45a1dcce3d36d080f74d1aed37844b878',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    risk: 3,\r\n    lpSymbol: 'TACO-USDT LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xc6d0728a0a6acf362cbce0433806d89942fb4403', // LINA-BUSD LP\r\n    },\r\n    tokenSymbol: 'TACO',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: TACO_MAINNET,\r\n    },\r\n    quoteTokenSymbol: QuoteToken.USDT,\r\n    quoteTokenAdresses: contracts.usdt,\r\n  },\r\n  {\r\n    risk: 3,\r\n    lpSymbol: 'TACO-USDC LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xe888076a3fe450cb3b31db7dac82be38faad3174', // LINA-BUSD LP\r\n    },\r\n    tokenSymbol: 'TACO',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: TACO_MAINNET,\r\n    },\r\n    quoteTokenSymbol: QuoteToken.USDC,\r\n    quoteTokenAdresses: contracts.usdc,\r\n  },\r\n  {\r\n    risk: 3,\r\n    isTokenOnly: true,\r\n    lpSymbol: 'AUTO',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x4d0228ebeb39f6d2f29ba528e2d15fc9121ead56', // LINA-BUSD LP\r\n    },\r\n    tokenSymbol: 'AUTO',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0xa184088a740c695e156f91f5cc086a06bb78b827',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BNB,\r\n    quoteTokenAdresses: contracts.wbnb,\r\n  }, */\r\n].map((farm, index) => ({ ...farm, pid: index }))\r\n\r\nexport default farms\r\n","export default {\r\n  cake: {\r\n    56: '0x9066e87Bac891409D690cfEfA41379b34af06391', // TACO TOKEN\r\n    97: '0xbcfede73a76e2294b82d28c2737f9eecdf0342eb',\r\n  },\r\n  masterChef: {\r\n    56: '0x36f44a1C8e973739D0034FF1B9B9f6c4c7085625',\r\n    97: '0x392C148b1c5f276a2867B79d34648cf951468aAC',\r\n  },\r\n  wbnb: {\r\n    56: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\r\n    97: '0xae13d989dac2f0debff460ac112a837c89baa7cd',\r\n  },\r\n  mulltiCall: {\r\n    56: '0x1ee38d535d541c55c9dae27b12edf090c608e6fb',\r\n    97: '0x79186Badee32fE71Be2cccfC0566E3b311109A2f',\r\n  },\r\n  busd: {\r\n    56: '0xe9e7cea3dedca5984780bafc599bd69add087d56',\r\n    97: '0x8301f2213c0eed49a7e28ae4c3e91722919b8b47',\r\n  },\r\n  usdc: {\r\n    56: '0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d',\r\n    97: '0x7ef95a0fee0dd31b22626fa2e10ee6a223f8a684',\r\n  },\r\n  usdt: {\r\n    56: '0x55d398326f99059ff775485246999027b3197955',\r\n    97: '0x7ef95a0fee0dd31b22626fa2e10ee6a223f8a684',\r\n  },\r\n}\r\n","import { createGlobalStyle } from 'styled-components'\r\n// eslint-disable-next-line import/no-unresolved\r\nimport { PancakeTheme } from '@pancakeswap-libs/uikit'\r\n\r\ndeclare module 'styled-components' {\r\n  /* eslint-disable @typescript-eslint/no-empty-interface */\r\n  export interface DefaultTheme extends PancakeTheme {}\r\n}\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  * {\r\n    font-family: 'Kanit', sans-serif;\r\n  }\r\n\r\n  @font-face {\r\n    font-family: 'taco';\r\n    src: url(/fonts/tacos.ttf);\r\n  }\r\n\r\n  body {\r\n    background-color: ${({ theme }) => theme.colors.background};\r\n\r\n    img {\r\n      height: auto;\r\n      max-width: 100%;\r\n    }\r\n  }\r\n`\r\n\r\nexport default GlobalStyle\r\n","export const EN = { code: 'en', language: 'English' }\r\n\r\nexport const allLanguages = [\r\n  EN,\r\n]\r\n","import React, { useState, useEffect } from 'react'\r\nimport { StringTranslations } from '@crowdin/crowdin-api-client'\r\nimport { TranslationsContext } from 'contexts/Localisation/translationsContext'\r\nimport { allLanguages, EN } from 'config/localisation/languageCodes'\r\n\r\nconst CACHE_KEY = 'pancakeSwapLanguage'\r\n\r\nexport interface LangType {\r\n  code: string\r\n  language: string\r\n}\r\n\r\nexport interface LanguageState {\r\n  selectedLanguage: LangType\r\n  setSelectedLanguage: (langObject: LangType) => void\r\n  translatedLanguage: LangType\r\n  setTranslatedLanguage: React.Dispatch<React.SetStateAction<LangType>>\r\n}\r\n\r\nconst LanguageContext = React.createContext({\r\n  selectedLanguage: EN,\r\n  setSelectedLanguage: () => undefined,\r\n  translatedLanguage: EN,\r\n  setTranslatedLanguage: () => undefined,\r\n} as LanguageState)\r\n\r\nconst fileId = 8\r\nconst projectId = parseInt(process.env.REACT_APP_CROWDIN_PROJECTID)\r\nconst stringTranslationsApi = new StringTranslations({\r\n  token: process.env.REACT_APP_CROWDIN_APIKEY,\r\n})\r\n\r\nconst fetchTranslationsForSelectedLanguage = (selectedLanguage) => {\r\n  return stringTranslationsApi.listLanguageTranslations(projectId, selectedLanguage.code, undefined, fileId, 200)\r\n}\r\n\r\nconst LanguageContextProvider = ({ children }) => {\r\n  const [selectedLanguage, setSelectedLanguage] = useState<any>(EN)\r\n  const [translatedLanguage, setTranslatedLanguage] = useState<any>(EN)\r\n  const [translations, setTranslations] = useState<Array<any>>([])\r\n\r\n  const getStoredLang = (storedLangCode: string) => {\r\n    return allLanguages.filter((language) => {\r\n      return language.code === storedLangCode\r\n    })[0]\r\n  }\r\n\r\n  useEffect(() => {\r\n    const storedLangCode = localStorage.getItem(CACHE_KEY)\r\n    if (storedLangCode) {\r\n      const storedLang = getStoredLang(storedLangCode)\r\n      setSelectedLanguage(storedLang)\r\n    } else {\r\n      setSelectedLanguage(EN)\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (selectedLanguage) {\r\n      console.log(`import(\\`../../../public/i18n/${selectedLanguage.code}.json\\`)`)\r\n      fetch(`./i18n/${selectedLanguage.code}.json`)\r\n        .then((r) => r.json())\r\n        // fetchTranslationsForSelectedLanguage(selectedLanguage)\r\n        .then((translationApiResponse) => {\r\n          if (translationApiResponse.data.length < 1) {\r\n            setTranslations(['error'])\r\n          } else {\r\n            setTranslations(translationApiResponse.data)\r\n          }\r\n        })\r\n        .then(() => setTranslatedLanguage(selectedLanguage))\r\n        .catch((e) => {\r\n          console.error('ERROR')\r\n          console.error(e)\r\n          setTranslations(['error'])\r\n        })\r\n    }\r\n  }, [selectedLanguage, setTranslations])\r\n\r\n  const handleLanguageSelect = (langObject: LangType) => {\r\n    setSelectedLanguage(langObject)\r\n    localStorage.setItem(CACHE_KEY, langObject.code)\r\n  }\r\n\r\n  return (\r\n    <LanguageContext.Provider\r\n      value={{ selectedLanguage, setSelectedLanguage: handleLanguageSelect, translatedLanguage, setTranslatedLanguage }}\r\n    >\r\n      <TranslationsContext.Provider value={{ translations, setTranslations }}>{children}</TranslationsContext.Provider>\r\n    </LanguageContext.Provider>\r\n  )\r\n}\r\n\r\nexport { LanguageContext, LanguageContextProvider }\r\n","import React, { useState } from 'react'\r\nimport { ThemeProvider as SCThemeProvider } from 'styled-components'\r\nimport { light, dark } from '@pancakeswap-libs/uikit'\r\n\r\nconst CACHE_KEY = 'IS_DARK'\r\n\r\nconst ThemeContext = React.createContext({ isDark: null, toggleTheme: () => null })\r\n\r\nconst ThemeContextProvider = ({ children }) => {\r\n  const [isDark, setIsDark] = useState(() => {\r\n    const isDarkUserSetting = localStorage.getItem(CACHE_KEY)\r\n    return isDarkUserSetting ? JSON.parse(isDarkUserSetting) : false\r\n  })\r\n\r\n  const toggleTheme = () => {\r\n    setIsDark((prevState) => {\r\n      localStorage.setItem(CACHE_KEY, JSON.stringify(!prevState))\r\n      return !prevState\r\n    })\r\n  }\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ isDark, toggleTheme }}>\r\n      <SCThemeProvider theme={isDark ? dark : light}>{children}</SCThemeProvider>\r\n    </ThemeContext.Provider>\r\n  )\r\n}\r\n\r\nexport { ThemeContext, ThemeContextProvider }\r\n","import { useContext } from 'react'\r\nimport { ThemeContext as StyledThemeCopntext } from 'styled-components'\r\nimport { ThemeContext } from 'contexts/ThemeContext'\r\n\r\nconst useTheme = () => {\r\n  const { isDark, toggleTheme } = useContext(ThemeContext)\r\n  const theme = useContext(StyledThemeCopntext)\r\n  return { isDark, toggleTheme, theme }\r\n}\r\n\r\nexport default useTheme\r\n","import { MenuEntry } from '@pancakeswap-libs/uikit'\r\n\r\nconst config: MenuEntry[] = [\r\n  {\r\n    label: 'Home',\r\n    icon: 'HomeIcon',\r\n    href: '/',\r\n  },\r\n  {\r\n    label: 'Trade',\r\n    icon: 'TradeIcon',\r\n    items: [\r\n      {\r\n        label: 'Exchange',\r\n        href: 'https://exchange.talkcryptotome.com/#/swap?outputCurrency=0x9066e87Bac891409D690cfEfA41379b34af06391',\r\n      },\r\n      {\r\n        label: 'Liquidity',\r\n        href:\r\n          'https://exchange.talkcryptotome.com/#/add/0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56/0x9066e87Bac891409D690cfEfA41379b34af06391',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    label: 'Farms',\r\n    icon: 'FarmIcon',\r\n    href: '/farms',\r\n  },\r\n  {\r\n    label: 'Pool',\r\n    icon: 'PoolIcon',\r\n    href: '/trucks',\r\n  },\r\n\r\n]\r\n\r\nexport default config\r\n","import React, { useContext } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { allLanguages } from 'config/localisation/languageCodes'\r\nimport { LanguageContext } from 'contexts/Localisation/languageContext'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { Menu as UikitMenu } from '@pancakeswap-libs/uikit'\r\nimport config from './config'\r\n\r\nconst Menu = (props) => {\r\n  const { account, connect, reset } = useWallet()\r\n  const { selectedLanguage, setSelectedLanguage } = useContext(LanguageContext)\r\n  const { isDark, toggleTheme } = useTheme()\r\n\r\n  return (\r\n    <UikitMenu\r\n      account={account}\r\n      login={connect}\r\n      logout={reset}\r\n      isDark={isDark}\r\n      toggleTheme={toggleTheme}\r\n      currentLang={selectedLanguage && selectedLanguage.code}\r\n      langs={allLanguages}\r\n      setLang={setSelectedLanguage}\r\n      links={config}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nexport default Menu\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Spinner } from '@pancakeswap-libs/uikit'\r\nimport Page from './layout/Page'\r\n\r\nconst Wrapper = styled(Page)`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\n\r\nconst PageLoader: React.FC = () => {\r\n  return (\r\n    <Wrapper>\r\n      <Spinner />\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default PageLoader\r\n","import React, { useEffect, Suspense, lazy } from 'react'\r\nimport { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { ResetCSS } from '@pancakeswap-libs/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useFetchPublicData } from 'state/hooks'\r\nimport GlobalStyle from './style/Global'\r\nimport Menu from './components/Menu'\r\nimport PageLoader from './components/PageLoader'\r\n\r\n\r\n// Route-based code splitting\r\n// Only pool is included in the main bundle because of it's the most visited page'\r\nconst Home = lazy(() => import('./views/Home'))\r\nconst Farms = lazy(() => import('./views/Farms'))\r\n// const Lottery = lazy(() => import('./views/Lottery'))\r\n// const Pools = lazy(() => import('./views/Pools'))\r\n// const Ifos = lazy(() => import('./views/Ifos'))\r\nconst NotFound = lazy(() => import('./views/NotFound'))\r\n// const Nft = lazy(() => import('./views/Nft'))\r\n\r\n// This config is required for number formating\r\nBigNumber.config({\r\n  EXPONENTIAL_AT: 1000,\r\n  DECIMAL_PLACES: 80,\r\n})\r\n\r\nconst App: React.FC = () => {\r\n  const { account, connect } = useWallet()\r\n  useEffect(() => {\r\n    if (!account && window.localStorage.getItem('accountStatus')) {\r\n      connect('injected')\r\n    }\r\n  }, [account, connect])\r\n\r\n  useFetchPublicData()\r\n\r\n  return (\r\n    <Router>\r\n      <ResetCSS />\r\n      <GlobalStyle />\r\n      <Menu>\r\n        <Suspense fallback={<PageLoader />}>\r\n          <Switch>\r\n            <Route path=\"/\" exact>\r\n              <Home />\r\n            </Route>\r\n            <Route path=\"/farms\">\r\n              <Farms />\r\n            </Route>\r\n            <Route path=\"/trucks\">\r\n              <Farms tokenMode />\r\n            </Route>\r\n            {/* <Route path=\"/pools\"> */}\r\n            {/*  <Pools /> */}\r\n            {/* </Route> */}\r\n            {/* <Route path=\"/lottery\"> */}\r\n            {/*  <Lottery /> */}\r\n            {/* </Route> */}\r\n            {/* <Route path=\"/ifo\"> */}\r\n            {/*  <Ifos /> */}\r\n            {/* </Route> */}\r\n            {/* <Route path=\"/nft\"> */}\r\n            {/*  <Nft /> */}\r\n            {/* </Route> */}\r\n            {/* Redirect */}\r\n            {/* <Route path=\"/staking\"> */}\r\n            {/*  <Redirect to=\"/pools\" /> */}\r\n            {/* </Route> */}\r\n            {/* <Route path=\"/syrup\"> */}\r\n            {/*  <Redirect to=\"/pools\" /> */}\r\n            {/* </Route> */}\r\n            {/* 404 */}\r\n            <Route component={NotFound} />\r\n          </Switch>\r\n        </Suspense>\r\n      </Menu>\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default React.memo(App)\r\n","import React, { useState, useEffect, useRef } from 'react'\r\nimport { getWeb3 } from 'utils/web3'\r\n\r\nconst BlockContext = React.createContext(0)\r\n\r\nconst BlockContextProvider = ({ children }) => {\r\n  const previousBlock = useRef(0)\r\n  const [block, setBlock] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const web3 = getWeb3()\r\n    const interval = setInterval(async () => {\r\n      const blockNumber = await web3.eth.getBlockNumber()\r\n      if (blockNumber !== previousBlock.current) {\r\n        previousBlock.current = blockNumber\r\n        setBlock(blockNumber)\r\n      }\r\n    }, 6000)\r\n\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  return <BlockContext.Provider value={block}>{children}</BlockContext.Provider>\r\n}\r\n\r\nexport { BlockContext, BlockContextProvider }\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport farmsReducer from './farms'\r\nimport poolsReducer from './pools'\r\n\r\nexport default configureStore({\r\n  devTools: process.env.NODE_ENV !== 'production',\r\n  reducer: {\r\n    farms: farmsReducer,\r\n    pools: poolsReducer,\r\n  },\r\n})\r\n","import React from 'react'\r\nimport { ModalProvider } from '@pancakeswap-libs/uikit'\r\n// import bsc, { UseWalletProvider } from '@binance-chain/bsc-use-wallet'\r\nimport * as bsc from '@binance-chain/bsc-use-wallet'\r\nimport { Provider } from 'react-redux'\r\nimport getRpcUrl from 'utils/getRpcUrl'\r\nimport { LanguageContextProvider } from 'contexts/Localisation/languageContext'\r\nimport { ThemeContextProvider } from 'contexts/ThemeContext'\r\nimport { BlockContextProvider } from 'contexts/BlockContext'\r\nimport { RefreshContextProvider } from 'contexts/RefreshContext'\r\nimport store from 'state'\r\n\r\nconst Providers: React.FC = ({ children }) => {\r\n  const rpcUrl = getRpcUrl()\r\n  const chainId = parseInt(process.env.REACT_APP_CHAIN_ID)\r\n  return (\r\n    <Provider store={store}>\r\n      <ThemeContextProvider>\r\n        <LanguageContextProvider>\r\n          <bsc.UseWalletProvider\r\n            chainId={chainId}\r\n            connectors={{\r\n              walletconnect: { rpcUrl },\r\n              bsc,\r\n            }}\r\n          >\r\n            <BlockContextProvider>\r\n              <RefreshContextProvider>\r\n                <ModalProvider>{children}</ModalProvider>\r\n              </RefreshContextProvider>\r\n            </BlockContextProvider>\r\n          </bsc.UseWalletProvider>\r\n        </LanguageContextProvider>\r\n      </ThemeContextProvider>\r\n    </Provider>\r\n  )\r\n}\r\n\r\nexport default Providers\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport Providers from './Providers'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Providers>\r\n      <App />\r\n    </Providers>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n)\r\n","import Web3 from 'web3'\r\nimport { HttpProviderOptions } from 'web3-core-helpers'\r\nimport { AbiItem } from 'web3-utils'\r\nimport { ContractOptions } from 'web3-eth-contract'\r\nimport getRpcUrl from 'utils/getRpcUrl'\r\n\r\nconst RPC_URL = getRpcUrl()\r\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\r\n\r\n/**\r\n * Provides a web3 instance using our own private provider httpProver\r\n */\r\nconst getWeb3 = () => {\r\n  const web3 = new Web3(httpProvider)\r\n  return web3\r\n}\r\nconst getContract = (abi: any, address: string, contractOptions?: ContractOptions) => {\r\n  const web3 = getWeb3()\r\n  return new web3.eth.Contract((abi as unknown) as AbiItem, address, contractOptions)\r\n}\r\n\r\nexport { getWeb3, getContract, httpProvider }\r\n"],"sourceRoot":""}