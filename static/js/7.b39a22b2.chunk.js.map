{"version":3,"sources":["utils/translateTextHelpers.ts","hooks/useI18n.ts","utils/formatBalance.ts","utils/callHelpers.ts","hooks/useWeb3.ts","hooks/useContract.ts","config/constants/index.ts","hooks/useHarvest.ts","components/UnlockButton.tsx","utils/erc20.ts","hooks/useFarmsWithBalance.ts","views/Home/components/CardValue.tsx","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","hooks/useAllEarnings.ts","hooks/useTokenBalance.ts","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","views/Home/components/TwitterCard.tsx","views/Home/Home.tsx"],"names":["variableRegex","getTranslation","translations","translationId","fallback","foundTranslation","find","translation","data","stringId","translatedString","text","includes","stringToReplace","exec","fallbackValueAtIndex","split","replace","replaceDynamicString","useI18n","useContext","TranslationsContext","length","getBalanceNumber","balance","decimals","displayBalance","BigNumber","dividedBy","pow","toNumber","getFullDisplayBalance","toFixed","approve","lpContract","masterChefContract","account","a","methods","options","address","ethers","constants","MaxUint256","send","from","stake","pid","amount","deposit","times","toString","on","tx","transactionHash","sousStake","sousChefContract","sousStakeBnb","value","unstake","withdraw","sousUnstake","emergencyWithdraw","sousEmegencyUnstake","harvest","soushHarvest","soushHarvestBnb","RPC_URL","getRpcUrl","httpProvider","Web3","providers","HttpProvider","timeout","useWeb3","ethereum","useWallet","refEth","useRef","useState","web3","setweb3","useEffect","current","useContract","abi","contractOptions","eth","Contract","contract","setContract","useMasterchef","masterChef","getMasterChefAddress","useSousChef","id","config","poolsConfig","pool","sousId","sousChef","contractAddress","process","farmsConfig","filter","farm","isCommunity","map","tokenSymbol","useHarvest","farmPid","dispatch","useDispatch","onReward","useCallback","txHash","fetchFarmUserDataAsync","useAllHarvest","farmPids","harvestPromises","reduce","accum","Promise","all","UnlockButton","props","TranslateString","connect","reset","onPresentConnectModal","useWalletModal","onClick","getContract","provider","erc20","getTokenBalance","tokenAddress","userAddress","balanceOf","call","useFarmsWithBalance","farmsWithBalances","setFarmsWithBalances","fastRefresh","useRefresh","calls","name","params","multicall","masterChefABI","rawResults","results","index","fetchBalances","CardValue","fontSize","prefix","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","bold","CakeHarvestBalance","earningsSum","color","style","lineHeight","CakeWalletBalance","cakeBalance","useAllEarnings","balances","setBalance","res","fetchAllBalances","useTokenBalance","fetchBalance","StyledFarmStakingCard","styled","Card","Block","div","Label","img","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","farmsWithBalance","getCakeAddress","eggPrice","usePriceCakeBusd","earning","balancesWithValue","balanceType","farmWithBalance","harvestAllFarms","size","mb","disabled","fullWidth","StyledCakeStats","Row","CakeStats","totalSupply","slowRefresh","setTotalSupply","cakeContract","cakeABI","supply","fetchTotalSupply","useTotalSupply","burnedBalance","bal","useBurnedBalance","farms","useFarms","tacoPrice","circSupply","minus","cakeSupply","marketCap","tacoPerBlock","StyledTotalValueLockedCard","TotalValueLockedCard","totalValue","useTotalValue","StyledTwitterCard","TwitterCard","dataSource","sourceType","screenName","height","chrome","width","Cards","mediaQueries","lg","BaseLayout","sm","Home","Page","FarmStakingCard"],"mappings":"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","file":"static/js/7.b39a22b2.chunk.js","sourcesContent":["import { useContext } from 'react'\r\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\r\n\r\nconst variableRegex = /%(.*?)%/\r\n\r\nconst replaceDynamicString = (foundTranslation: string, fallback: string) => {\r\n  const stringToReplace = variableRegex.exec(foundTranslation)[0]\r\n  // const indexToReplace = foundTranslation.split(' ').indexOf(stringToReplace)\r\n  const fallbackValueAtIndex = fallback.split(' ')[0]\r\n  return foundTranslation.replace(stringToReplace, fallbackValueAtIndex)\r\n}\r\n\r\nexport const getTranslation = (translations: Array<any>, translationId: number, fallback: string) => {\r\n  const foundTranslation = translations.find((translation) => {\r\n    return translation.data.stringId === translationId\r\n  })\r\n  if (foundTranslation) {\r\n    const translatedString = foundTranslation.data.text\r\n    const includesVariable = translatedString.includes('%')\r\n    if (includesVariable) {\r\n      return replaceDynamicString(translatedString, fallback)\r\n    }\r\n    return translatedString\r\n  }\r\n  return fallback\r\n}\r\n\r\n// TODO: Replace instances where this is called directly with the \"useI18n\" hook.\r\n// Using this directly can lead to errors because \"useContext\" is not preserved between renders\r\n// @see https://reactjs.org/docs/hooks-rules.html\r\nexport const TranslateString = (translationId: number, fallback: string) => {\r\n  const { translations } = useContext(TranslationsContext)\r\n  if (translations[0] === 'error') {\r\n    return fallback\r\n  }\r\n  if (translations.length > 0) {\r\n    return getTranslation(translations, translationId, fallback)\r\n  }\r\n  return fallback\r\n}\r\n","import { useContext } from 'react'\r\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\r\nimport { getTranslation } from '../utils/translateTextHelpers'\r\n\r\nconst useI18n = () => {\r\n  const { translations } = useContext(TranslationsContext)\r\n\r\n  return (translationId: number, fallback: string) => {\r\n    if (translations[0] === 'error') {\r\n      return fallback\r\n    }\r\n    if (translations.length > 0) {\r\n      return getTranslation(translations, translationId, fallback)\r\n    }\r\n    return fallback\r\n  }\r\n}\r\n\r\nexport default useI18n\r\n","import BigNumber from 'bignumber.js'\r\n\r\nexport const getBalanceNumber = (balance: BigNumber, decimals = 18) => {\r\n  const displayBalance = new BigNumber(balance).dividedBy(new BigNumber(10).pow(decimals))\r\n  return displayBalance.toNumber()\r\n}\r\n\r\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18) => {\r\n  return balance.dividedBy(new BigNumber(10).pow(decimals)).toFixed()\r\n}\r\n","import BigNumber from 'bignumber.js'\r\nimport { ethers } from 'ethers'\r\n\r\nexport const approve = async (lpContract, masterChefContract, account) => {\r\n  return lpContract.methods\r\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\r\n    .send({ from: account })\r\n}\r\n\r\nexport const stake = async (masterChefContract, pid, amount, account) => {\r\n  return masterChefContract.methods\r\n    .deposit(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousStake = async (sousChefContract, amount, account) => {\r\n  return sousChefContract.methods\r\n    .deposit(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\r\n  return sousChefContract.methods\r\n    .deposit()\r\n    .send({ from: account, value: new BigNumber(amount).times(new BigNumber(10).pow(18)).toString() })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const unstake = async (masterChefContract, pid, amount, account) => {\r\n  return masterChefContract.methods\r\n    .withdraw(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousUnstake = async (sousChefContract, amount, account) => {\r\n  // shit code: hard fix for old CTK and BLK\r\n  if (sousChefContract.options.address === '0x3B9B74f48E89Ebd8b45a53444327013a2308A9BC') {\r\n    return sousChefContract.methods\r\n      .emergencyWithdraw()\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  }\r\n  if (sousChefContract.options.address === '0xBb2B66a2c7C2fFFB06EA60BeaD69741b3f5BF831') {\r\n    return sousChefContract.methods\r\n      .emergencyWithdraw()\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  }\r\n  return sousChefContract.methods\r\n    .withdraw(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousEmegencyUnstake = async (sousChefContract, amount, account) => {\r\n  return sousChefContract.methods\r\n    .emergencyWithdraw()\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const harvest = async (masterChefContract, pid, account) => {\r\n  return masterChefContract.methods\r\n    .deposit(pid, '0')\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const soushHarvest = async (sousChefContract, account) => {\r\n  return sousChefContract.methods\r\n    .deposit('0')\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const soushHarvestBnb = async (sousChefContract, account) => {\r\n  return sousChefContract.methods\r\n    .deposit()\r\n    .send({ from: account, value: new BigNumber(0) })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n","import { useEffect, useState, useRef } from 'react'\r\nimport Web3 from 'web3'\r\nimport { HttpProviderOptions } from 'web3-core-helpers'\r\nimport { provider as ProviderType } from 'web3-core'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport getRpcUrl from 'utils/getRpcUrl'\r\n\r\nconst RPC_URL = getRpcUrl()\r\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\r\n\r\n/**\r\n * Provides a web3 instance using the provider provided by useWallet\r\n * with a fallback of an httpProver\r\n * Recreate web3 instance only if the ethereum provider change\r\n */\r\nconst useWeb3 = () => {\r\n  const { ethereum }: { ethereum: ProviderType } = useWallet()\r\n  const refEth = useRef(ethereum)\r\n  const [web3, setweb3] = useState(new Web3(ethereum || httpProvider))\r\n\r\n  useEffect(() => {\r\n    if (ethereum !== refEth.current) {\r\n      setweb3(new Web3(ethereum || httpProvider))\r\n      refEth.current = ethereum\r\n    }\r\n  }, [ethereum])\r\n\r\n  return web3\r\n}\r\n\r\nexport default useWeb3\r\n","import { useEffect, useState } from 'react'\r\nimport { AbiItem } from 'web3-utils'\r\nimport { ContractOptions } from 'web3-eth-contract'\r\nimport useWeb3 from 'hooks/useWeb3'\r\nimport { getMasterChefAddress, getCakeAddress } from 'utils/addressHelpers'\r\nimport { poolsConfig } from 'config/constants'\r\nimport { PoolCategory } from 'config/constants/types'\r\nimport erc20 from 'config/abi/erc20.json'\r\nimport masterChef from 'config/abi/masterchef.json'\r\nimport sousChef from 'config/abi/sousChef.json'\r\n\r\n\r\nconst useContract = (abi: AbiItem, address: string, contractOptions?: ContractOptions) => {\r\n  const web3 = useWeb3()\r\n  const [contract, setContract] = useState(new web3.eth.Contract(abi, address, contractOptions))\r\n\r\n  useEffect(() => {\r\n    setContract(new web3.eth.Contract(abi, address, contractOptions))\r\n  }, [abi, address, contractOptions, web3])\r\n\r\n  return contract\r\n}\r\n\r\n/**\r\n * Helper hooks to get specific contracts (by ABI)\r\n */\r\n\r\nexport const useERC20 = (address: string) => {\r\n  const erc20Abi = (erc20 as unknown) as AbiItem\r\n  return useContract(erc20Abi, address)\r\n}\r\n\r\nexport const useCake = () => {\r\n  return useERC20(getCakeAddress())\r\n}\r\n\r\nexport const useMasterchef = () => {\r\n  const abi = (masterChef as unknown) as AbiItem\r\n  return useContract(abi, getMasterChefAddress())\r\n}\r\n\r\nexport const useSousChef = (id) => {\r\n  const config = poolsConfig.find((pool) => pool.sousId === id)\r\n  const rawAbi = sousChef\r\n  const abi = (rawAbi as unknown) as AbiItem\r\n  return useContract(abi, config.contractAddress[process.env.REACT_APP_CHAIN_ID])\r\n}\r\n\r\nexport default useContract\r\n","import farmsConfig from './farms'\r\n\r\nconst communityFarms = farmsConfig.filter((farm) => farm.isCommunity).map((farm) => farm.tokenSymbol)\r\n\r\nexport { farmsConfig, communityFarms }\r\nexport { default as poolsConfig } from './pools'\r\n\r\n","import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions'\r\nimport { soushHarvest, soushHarvestBnb, harvest } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef } from './useContract'\r\n\r\nexport const useHarvest = (farmPid: number) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    const txHash = await harvest(masterChefContract, farmPid, account)\r\n    dispatch(fetchFarmUserDataAsync(account))\r\n    return txHash\r\n  }, [account, dispatch, farmPid, masterChefContract])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport const useAllHarvest = (farmPids: number[]) => {\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    const harvestPromises = farmPids.reduce((accum, pid) => {\r\n      return [...accum, harvest(masterChefContract, pid, account)]\r\n    }, [])\r\n\r\n    return Promise.all(harvestPromises)\r\n  }, [account, farmPids, masterChefContract])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const sousChefContract = useSousChef(sousId)\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    if (sousId === 0) {\r\n      await harvest(masterChefContract, 0, account)\r\n    } else if (isUsingBnb) {\r\n      await soushHarvestBnb(sousChefContract, account)\r\n    } else {\r\n      await soushHarvest(sousChefContract, account)\r\n    }\r\n    dispatch(updateUserPendingReward(sousId, account))\r\n    dispatch(updateUserBalance(sousId, account))\r\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n","import React from 'react'\r\nimport { Button, useWalletModal } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nconst UnlockButton = (props) => {\r\n  const TranslateString = useI18n()\r\n  const { connect, reset } = useWallet()\r\n  const { onPresentConnectModal } = useWalletModal(connect, reset)\r\n\r\n  return (\r\n    <Button onClick={onPresentConnectModal} {...props}>\r\n      {TranslateString(292, 'Unlock Wallet')}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default UnlockButton\r\n","import Web3 from 'web3'\r\nimport { provider as ProviderType } from 'web3-core'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { AbiItem } from 'web3-utils'\r\nimport erc20 from 'config/abi/erc20.json'\r\n\r\nexport const getContract = (provider: ProviderType, address: string) => {\r\n  const web3 = new Web3(provider)\r\n  const contract = new web3.eth.Contract((erc20 as unknown) as AbiItem, address)\r\n  return contract\r\n}\r\n\r\nexport const getAllowance = async (\r\n  lpContract: Contract,\r\n  masterChefContract: Contract,\r\n  account: string,\r\n): Promise<string> => {\r\n  try {\r\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\r\n    return allowance\r\n  } catch (e) {\r\n    return '0'\r\n  }\r\n}\r\n\r\nexport const getTokenBalance = async (\r\n  provider: ProviderType,\r\n  tokenAddress: string,\r\n  userAddress: string,\r\n): Promise<string> => {\r\n  const contract = getContract(provider, tokenAddress)\r\n  try {\r\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\r\n    return balance\r\n  } catch (e) {\r\n    return '0'\r\n  }\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport { FarmConfig } from 'config/constants/types'\r\nimport useRefresh from './useRefresh'\r\n\r\nexport interface FarmWithBalance extends FarmConfig {\r\n  balance: BigNumber\r\n}\r\n\r\nconst useFarmsWithBalance = () => {\r\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\r\n  const { account } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalances = async () => {\r\n      const calls = farmsConfig.map((farm) => ({\r\n        address: getMasterChefAddress(),\r\n        name: 'pendingTCTM',\r\n        params: [farm.pid, account],\r\n      }))\r\n\r\n      const rawResults = await multicall(masterChefABI, calls)\r\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\r\n\r\n      setFarmsWithBalances(results)\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalances()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return farmsWithBalances\r\n}\r\n\r\nexport default useFarmsWithBalance\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useCountUp } from 'react-countup'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\n\r\ninterface CardValueProps {\r\n  value: number\r\n  decimals?: number\r\n  fontSize?: string\r\n  prefix?: string\r\n}\r\n\r\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px', prefix }) => {\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: value,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals:\r\n      // eslint-disable-next-line no-nested-ternary\r\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\r\n  })\r\n\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(value)\r\n  }, [value, updateValue])\r\n\r\n  return (\r\n    <Text bold fontSize={fontSize}>\r\n      {prefix}\r\n      {countUp}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default CardValue\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport BigNumber from 'bignumber.js'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useAllEarnings from 'hooks/useAllEarnings'\r\nimport CardValue from './CardValue'\r\n\r\nconst CakeHarvestBalance = ({ earningsSum }) => {\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '60px' }}>\r\n        {TranslateString(298, 'Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return <CardValue value={earningsSum} />\r\n}\r\n\r\nexport default CakeHarvestBalance\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport CardValue from './CardValue'\r\n\r\nconst CakeWalletBalance = ({ cakeBalance }) => {\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '36px' }}>\r\n        {TranslateString(298, 'Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return <CardValue value={cakeBalance} fontSize=\"24px\" />\r\n}\r\n\r\nexport default CakeWalletBalance\r\n","import { useEffect, useState } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport useRefresh from './useRefresh'\r\n\r\nconst useAllEarnings = () => {\r\n  const [balances, setBalance] = useState([])\r\n  const { account }: { account: string } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchAllBalances = async () => {\r\n      const calls = farmsConfig.map((farm) => ({\r\n        address: getMasterChefAddress(),\r\n        name: 'pendingTCTM',\r\n        params: [farm.pid, account],\r\n      }))\r\n\r\n      const res = await multicall(masterChefABI, calls)\r\n\r\n      setBalance(res)\r\n    }\r\n\r\n    if (account) {\r\n      fetchAllBalances()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return balances\r\n}\r\n\r\nexport default useAllEarnings\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { provider } from 'web3-core'\r\nimport cakeABI from 'config/abi/cake.json'\r\nimport { getContract } from 'utils/web3'\r\nimport { getTokenBalance } from 'utils/erc20'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport useRefresh from './useRefresh'\r\n\r\nconst useTokenBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\r\n      setBalance(new BigNumber(res))\r\n    }\r\n\r\n    if (account && ethereum) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, ethereum, tokenAddress, fastRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useTotalSupply = () => {\r\n  const { slowRefresh } = useRefresh()\r\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalSupply() {\r\n      const cakeContract = getContract(cakeABI, getCakeAddress())\r\n      const supply = await cakeContract.methods.totalSupply().call()\r\n      setTotalSupply(new BigNumber(supply))\r\n    }\r\n\r\n    fetchTotalSupply()\r\n  }, [slowRefresh])\r\n\r\n  return totalSupply\r\n}\r\n\r\nexport const useBurnedBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { slowRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const cakeContract = getContract(cakeABI, getCakeAddress())\r\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\r\n      setBalance(new BigNumber(bal))\r\n    }\r\n\r\n    fetchBalance()\r\n  }, [tokenAddress, slowRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport default useTokenBalance\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Button } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useI18n from 'hooks/useI18n'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport { useAllHarvest } from 'hooks/useHarvest'\r\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport CakeHarvestBalance from './CakeHarvestBalance'\r\nimport CakeWalletBalance from './CakeWalletBalance'\r\nimport useAllEarnings from '../../../hooks/useAllEarnings'\r\nimport { usePriceCakeBusd } from '../../../state/hooks'\r\nimport { getCakeAddress } from '../../../utils/addressHelpers'\r\nimport useTokenBalance from '../../../hooks/useTokenBalance'\r\nimport { getBalanceNumber } from '../../../utils/formatBalance'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  background-repeat: no-repeat;\r\n  background-position: top right;\r\n  min-height: 376px;\r\n`\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst CardImage = styled.img`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Label = styled.div`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  font-size: 14px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst FarmedStakingCard = () => {\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { account } = useWallet()\r\n  const TranslateString = useI18n()\r\n  const farmsWithBalance = useFarmsWithBalance()\r\n  const cakeBalance = getBalanceNumber(useTokenBalance(getCakeAddress()))\r\n  const eggPrice = usePriceCakeBusd().toNumber()\r\n  const allEarnings = useAllEarnings()\r\n  const earningsSum = allEarnings.reduce((accum, earning) => {\r\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\r\n  }, 0)\r\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\r\n\r\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\r\n\r\n  const harvestAllFarms = useCallback(async () => {\r\n    setPendingTx(true)\r\n    try {\r\n      await onReward()\r\n    } catch (error) {\r\n      // TODO: find a way to handle when the user rejects transaction or it fails\r\n    } finally {\r\n      setPendingTx(false)\r\n    }\r\n  }, [onReward])\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(542, 'Farms & Staking')}\r\n        </Heading>\r\n        {/* <CardImage src=\"/images/TCTM/logotctm.png\" alt=\"cake logo\" width={64} height={64} /> */}\r\n        <Block>\r\n          <Label>{TranslateString(544, 'TCTM to Harvest')}</Label>\r\n          <CakeHarvestBalance earningsSum={earningsSum} />\r\n          <Label>~${(eggPrice * earningsSum).toFixed(2)}</Label>\r\n        </Block>\r\n        <Block>\r\n          <Label>{TranslateString(546, 'TCTM in Wallet')}</Label>\r\n          <CakeWalletBalance cakeBalance={cakeBalance} />\r\n          <Label>~${(eggPrice * cakeBalance).toFixed(2)}</Label>\r\n        </Block>\r\n        <Actions>\r\n          {account ? (\r\n            <Button\r\n              id=\"harvest-all\"\r\n              disabled={balancesWithValue.length <= 0 || pendingTx}\r\n              onClick={harvestAllFarms}\r\n              fullWidth\r\n            >\r\n              {pendingTx\r\n                ? TranslateString(548, 'Collecting TCTM')\r\n                : TranslateString(999, `Harvest all (${balancesWithValue.length})`)}\r\n            </Button>\r\n          ) : (\r\n            <UnlockButton fullWidth />\r\n          )}\r\n        </Actions>\r\n      </CardBody>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default FarmedStakingCard\r\n","import React from 'react'\r\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport styled from 'styled-components'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport CardValue from './CardValue'\r\nimport { useFarms, usePriceCakeBusd } from '../../../state/hooks'\r\n\r\nconst StyledCakeStats = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst CakeStats = () => {\r\n  const TranslateString = useI18n()\r\n  const totalSupply = useTotalSupply()\r\n  const burnedBalance = useBurnedBalance(getCakeAddress())\r\n  const farms = useFarms()\r\n  const tacoPrice = usePriceCakeBusd()\r\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0)\r\n  const cakeSupply = getBalanceNumber(circSupply)\r\n  const marketCap = tacoPrice.times(circSupply)\r\n\r\n  let tacoPerBlock = 0\r\n  if (farms && farms[0] && farms[0].tacoPerBlock) {\r\n    tacoPerBlock = new BigNumber(farms[0].tacoPerBlock).div(new BigNumber(10).pow(18)).toNumber()\r\n  }\r\n\r\n  return (\r\n    <StyledCakeStats>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(534, 'TCTM Stats')}\r\n        </Heading>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(536, 'Total TCTM Supply')}</Text>\r\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} decimals={0} />}\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(999, 'Market Cap')}</Text>\r\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(marketCap)} decimals={0} prefix=\"$\" />\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(538, 'Total TCTM Burned')}</Text>\r\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(burnedBalance)} decimals={0} />\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(540, 'New TCTM/block')}</Text>\r\n          <Text bold fontSize=\"14px\">\r\n            {tacoPerBlock}\r\n          </Text>\r\n        </Row>\r\n      </CardBody>\r\n    </StyledCakeStats>\r\n  )\r\n}\r\n\r\nexport default CakeStats\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useGetStats } from 'hooks/api'\r\nimport { useTotalValue } from '../../../state/hooks'\r\nimport CardValue from './CardValue'\r\n\r\nconst StyledTotalValueLockedCard = styled(Card)`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n`\r\n\r\nconst TotalValueLockedCard = () => {\r\n  const TranslateString = useI18n()\r\n  // const data = useGetStats()\r\n  const totalValue = useTotalValue()\r\n  // const tvl = totalValue.toFixed(2);\r\n\r\n  return (\r\n    <StyledTotalValueLockedCard>\r\n      <CardBody>\r\n        <Heading size=\"lg\" mb=\"24px\">\r\n          {TranslateString(999, 'Total Value Locked (TVL)')}\r\n        </Heading>\r\n        <>\r\n          {/* <Heading size=\"xl\">{`$${tvl}`}</Heading> */}\r\n          {/* <Heading size=\"xl\"> */}\r\n          <CardValue value={totalValue.toNumber()} prefix=\"$\" decimals={2} />\r\n          {/* </Heading> */}\r\n          <Text color=\"textSubtle\">{TranslateString(999, 'Across all Farms and Pools')}</Text>\r\n        </>\r\n      </CardBody>\r\n    </StyledTotalValueLockedCard>\r\n  )\r\n}\r\n\r\nexport default TotalValueLockedCard\r\n","import React from 'react'\r\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport styled from 'styled-components'\r\nimport { Timeline } from 'react-twitter-widgets'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport CardValue from './CardValue'\r\nimport { useFarms } from '../../../state/hooks'\r\n\r\nconst StyledTwitterCard = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst TwitterCard = () => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <StyledTwitterCard>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(10003, 'Announcements')}\r\n        </Heading>\r\n        <Timeline\r\n          dataSource={{\r\n            sourceType: 'profile',\r\n            screenName: 'feareater',\r\n          }}\r\n          options={{\r\n            height: '300',\r\n            chrome: 'noheader, nofooter',\r\n            width: '400',\r\n          }}\r\n        />\r\n      </CardBody>\r\n    </StyledTwitterCard>\r\n  )\r\n}\r\n\r\nexport default TwitterCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Text, BaseLayout } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport Page from 'components/layout/Page'\r\nimport FarmStakingCard from './components/FarmStakingCard'\r\nimport CakeStats from './components/CakeStats'\r\nimport TotalValueLockedCard from './components/TotalValueLockedCard'\r\nimport TwitterCard from './components/TwitterCard'\r\n\r\nconst Hero = styled.div`\r\n  align-items: center;\r\n  background-repeat: no-repeat;\r\n  background-position: top center;\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  margin: auto;\r\n  margin-bottom: 32px;\r\n  text-align: center;\r\n  padding-top: 48px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    padding-top: 116px;\r\n    background: url();\r\n    background-size: contain;\r\n    background-position: left center, right center;\r\n    height: 10px;\r\n    padding-top: 0;\r\n  }\r\n`\r\n\r\nconst Cards = styled(BaseLayout)`\r\n  align-items: start;\r\n  justify-content: start;\r\n  margin-bottom: 48px;\r\n\r\n  & > div {\r\n    grid-column: span 6;\r\n    width: 100%;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 8;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    & > div {\r\n      grid-column: span 6;\r\n    }\r\n  }\r\n`\r\n\r\nconst Home: React.FC = () => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <Page>\r\n      <div>\r\n        <Cards>\r\n          <FarmStakingCard />\r\n          <TwitterCard />\r\n          <CakeStats />\r\n          <TotalValueLockedCard />\r\n        </Cards>\r\n      </div>\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default Home\r\n"],"sourceRoot":""}